%YAML:1.0
# 路径
datasetDir: dataset/rgbd_dataset_freiburg3_long_office_household/rgb

# 相机内参
Camera.fx: 535.4
Camera.fy: 539.2
Camera.cx: 320.1
Camera.cy: 247.6

# 描述子提取的数量
VO.nfeatures: 500

# 特征点算法

VO.featureType: ORB
#    @param scaleFactor Pyramid decimation ratio, greater than 1. scaleFactor==2 means the classical
#    pyramid, where each next level has 4x less pixels than the previous, but such a big scale factor
#    will degrade feature matching scores dramatically. On the other hand, too close to 1 scale factor
#    will mean that to cover certain scale range you will need more pyramid levels and so the speed
#    will suffer.
VO.ORB.scaleFactor: 1.2
#    @param nlevels The number of pyramid levels. The smallest level will have linear size equal to
#    input_image_linear_size/pow(scaleFactor, nlevels - firstLevel).
VO.ORB.nlevels: 8
#    @param edgeThreshold This is size of the border where the features are not detected. It should
#    roughly match the patchSize parameter.
VO.ORB.edgeThreshold: 31
#    @param firstLevel The level of pyramid to put source image to. Previous layers are filled
#    with upscaled source image.
VO.ORB.firstLevel: 0
#    @param WTA_K The number of points that produce each element of the oriented BRIEF descriptor. The
#    default value 2 means the BRIEF where we take a random point pair and compare their brightnesses,
#    so we get 0/1 response. Other possible values are 3 and 4. For example, 3 means that we take 3
#    random points (of course, those point coordinates are random, but they are generated from the
#    pre-defined seed, so each element of BRIEF descriptor is computed deterministically from the pixel
#    rectangle), find point of maximum brightness and output index of the winner (0, 1 or 2). Such
#    output will occupy 2 bits, and therefore it will need a special variant of Hamming distance,
#    denoted as NORM_HAMMING2 (2 bits per bin). When WTA_K=4, we take 4 random points to compute each
#    bin (that will also occupy 2 bits with possible values 0, 1, 2 or 3).
VO.ORB.WTA_K: 2
#    @param patchSize size of the patch used by the oriented BRIEF descriptor. Of course, on smaller
#    pyramid layers the perceived image area covered by a feature will be larger.
VO.ORB.patchSize: 31
#    @param fastThreshold
VO.ORB.fastThreshold: 20


# MapViewer的背景颜色
MapViewer.backgroundColor.r: 0.8
MapViewer.backgroundColor.g: 0.8
MapViewer.backgroundColor.b: 0.8
# MapViewer进行update后是否等待按键
MapViewer.updateWait: 0
# 镜头与当前帧的距离
MapViewer.disCamera: 100
# 是否自动跟踪当前帧
MapViewer.trackCurrFrame: 1
# 是否画norm
MapViewer.drawNorms: 1


# 特征匹配方式
Matcher.matcherType: BruteForce-Hamming

# 用于解对极约束的最少点数
Solver2D2D.minInlierNum: 50
# 用于解对极约束的最小内点比例
Solver2D2D.minInlierRatio: 0.3
# 首先筛选前rankRatio比例的匹配
Solver2D2D.Matcher.rankRatio: 0.5
# 特征距离阈值相对最小特征距离的比例
Solver2D2D.Matcher.disThresRatio: 5
# 特征阈值的最小值，防止阈值过小选出的点不够
# Matcher.disThresMin: 30
Solver2D2D.Matcher.disThresMin: 150
# 如果testRatio不为0，通过knnMatch获得距离最近的两个match
# 测试第一个match的距离是否小于第二个match的距离的testRatio倍
# 0 <= testRati < 1
Solver2D2D.Matcher.testRatio: 0.8

# 用于解PnP选取的最多局部地图点 TODO:（暂时取消）
Solver3D2D.max3Dnum: 500
# 用于解PnP选取的最少局部地图点
Solver3D2D.min3Dnum: 30
# 用于解PnP选取的局部地图点距离范围
Solver3D2D.max3Ddis: 50
# 用于解PnP的最少点数
Solver3D2D.minInlierNum: 20
# 用于解PnP的最小内点比例
Solver3D2D.minInlierRatio: 0.3
# 首先筛选前rankRatio比例的匹配
Solver3D2D.Matcher.rankRatio: 0.8
# 特征距离阈值相对最小特征距离的比例
Solver3D2D.Matcher.disThresRatio: 10
# 特征阈值的最小值，防止阈值过小选出的点不够
# Matcher.disThresMin: 30
Solver3D2D.Matcher.disThresMin: 300
# 如果testRatio不为0，通过knnMatch获得距离最近的两个match
# 测试第一个match的距离是否小于第二个match的距离的testRatio倍
# 0 <= testRati < 1
Solver3D2D.Matcher.testRatio: 0.8

# 三角化点到两帧的最大距离相对于帧间距的最大比例
Triangulater.maxDisRatio: 100
Triangulater.minDisRatio: 1
# 重投影误差最大值 TODO:（暂时取消）
# Triangulater.maxReprojErr: 30

# local_map
# 最少关键点数
# 如果当前局部地图关键帧数等于最大关键帧数，且关键点数小于最少关键点数，则增加最大关键帧数
# 否则减小最大关键帧数
LocalMap.minMapPoints: 500
# 地图点到每个观测帧的最大距离
LocalMap.maxInlierPointDis: 50
# 关键帧最大数量，超过此数量删除旧关键帧
LocalMap.minKeyFrames: 8
# 重投影误差最大值
LocalMap.maxReprojErr: 30
# 首先筛选前rankRatio比例的匹配
LocalMap.Matcher.rankRatio: 0.5
# 特征距离阈值相对最小特征距离的比例
LocalMap.Matcher.disThresRatio: 3
# 特征阈值的最小值，防止阈值过小选出的点不够
# Matcher.disThresMin: 30
LocalMap.Matcher.disThresMin: 100
# 如果testRatio不为0，通过knnMatch获得距离最近的两个match
# 测试第一个match的距离是否小于第二个match的距离的testRatio倍
# 0 <= testRati < 1
LocalMap.Matcher.testRatio: 0.8

# tracking

# 初始化两帧的最大间隔帧数
Initializer.maxFrameInterval: 40
# 初始化两帧的最小间隔帧数
Initializer.minFrameInterval: 10
# 初始化地图的最小点数
Initializer.minMapPointNum: 50

# 关键帧的最小间距
Tracker.minKeyFrameDis: 0.5
# 关键帧的最大间距
Tracker.maxKeyFrameDis: 10
# 关键帧的最少地图点
Tracker.minKeyFrameInlierNum: 30
# 关键帧之间的最小间隔帧数
Tracker.minKeyFrameInterval: 2
# 关键帧解PnP所用地图点数相对于上一关键帧的最大比例
Tracker.maxKeyFrameTrackRatio: 0.7


