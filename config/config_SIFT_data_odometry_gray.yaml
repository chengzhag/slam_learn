%YAML:1.0
# 路径
datasetDir: dataset/data_odometry_gray/dataset/sequences/00/image_0
startIndex: 80

# 相机内参
Camera.fx: 718.856
Camera.fy: 718.856
Camera.cx: 607.1928
Camera.cy: 185.2157

# BA
#// Scaling
#// -------
#// Given one robustifier
#//   s -> rho(s)
#// one can change the length scale at which robustification takes
#// place, by adding a scale factor 'a' as follows:
#//
#//   s -> a^2 rho(s / a^2).
#//
#// The first and second derivatives are:
#//
#//   s -> rho'(s / a^2),
#//   s -> (1 / a^2) rho''(s / a^2),
#//
#// but the behaviour near s = 0 is the same as the original function,
#// i.e.
#//
#//   rho(s) = s + higher order terms,
#//   a^2 rho(s / a^2) = s + higher order terms.
#//
#// The scalar 'a' should be positive.
#//
#// The reason for the appearance of squaring is that 'a' is in the
#// units of the residual vector norm whereas 's' is a squared
#// norm. For applications it is more convenient to specify 'a' than
#// its square. The commonly used robustifiers below are described in
#// un-scaled format (a = 1) but their implementations work for any
#// non-zero value of 'a'.
#
#// Huber.
#//
#//   rho(s) = s               for s <= 1,
#//   rho(s) = 2 sqrt(s) - 1   for s >= 1.
#//
#// At s = 0: rho = [0, 1, 0].
#//
#// The scaling parameter 'a' corresponds to 'delta' on this page:
#//   http://en.wikipedia.org/wiki/Huber_Loss_Function
BA.lossFunction.scaling: 4

# 描述子提取的数量
VO.nfeatures: 300

# 特征点算法

VO.featureType: SIFT
#  @param nOctaveLayers The number of layers in each octave. 3 is the value used in D. Lowe paper. The
#  number of octaves is computed automatically from the image resolution.
VO.SIFT.nOctaveLayers: 3
#  @param contrastThreshold The contrast threshold used to filter out weak features in semi-uniform
#  (low-contrast) regions. The larger the threshold, the less features are produced by the detector.
VO.SIFT.contrastThreshold: 0.01
#  @param edgeThreshold The threshold used to filter out edge-like features. Note that the its meaning
#  is different from the contrastThreshold, i.e. the larger the edgeThreshold, the less features are
#  filtered out (more features are retained).
VO.SIFT.edgeThreshold: 5
#  @param sigma The sigma of the Gaussian applied to the input image at the octave \#0. If your image
#  is captured with a weak camera with soft lenses, you might want to reduce the number.
VO.SIFT.sigma: 3


# MapViewer的背景颜色
MapViewer.backgroundColor.r: 0.8
MapViewer.backgroundColor.g: 0.8
MapViewer.backgroundColor.b: 0.8
# MapViewer进行update后是否等待按键
MapViewer.updateWait: 1
# 镜头与当前帧的距离
MapViewer.disCamera: 50
# 是否自动跟踪当前帧
MapViewer.trackCurrFrame: 1
# 是否画norm
MapViewer.drawNorms: 0


# 特征匹配方式
Matcher.matcherType: BruteForce

# 用于解对极约束的最少点数
Solver2D2D.minInlierNum: 50
# 用于解对极约束的最小内点比例
Solver2D2D.minInlierRatio: 0.3
# 首先筛选前rankRatio比例的匹配
Solver2D2D.Matcher.rankRatio: 0.5
# 特征距离阈值相对最小特征距离的比例
Solver2D2D.Matcher.disThresRatio: 5
# 特征阈值的最小值，防止阈值过小选出的点不够
# Matcher.disThresMin: 30
Solver2D2D.Matcher.disThresMin: 150
# 如果testRatio不为0，通过knnMatch获得距离最近的两个match
# 测试第一个match的距离是否小于第二个match的距离的testRatio倍
# 0 <= testRati < 1
Solver2D2D.Matcher.testRatio: 0.9

# 用于解PnP选取的最多局部地图点 TODO:（暂时取消）
Solver3D2D.max3Dnum: 500
# 用于解PnP选取的最少局部地图点
Solver3D2D.min3Dnum: 30
# 用于解PnP选取的局部地图点距离范围
Solver3D2D.max3Ddis: 50
# 用于解PnP的最少点数
Solver3D2D.minInlierNum: 10
# 用于解PnP的最小内点比例
Solver3D2D.minInlierRatio: 0.3
# 首先筛选前rankRatio比例的匹配
Solver3D2D.Matcher.rankRatio: 0.8
# 特征距离阈值相对最小特征距离的比例
Solver3D2D.Matcher.disThresRatio: 10
# 特征阈值的最小值，防止阈值过小选出的点不够
# Matcher.disThresMin: 30
Solver3D2D.Matcher.disThresMin: 200
# 如果testRatio不为0，通过knnMatch获得距离最近的两个match
# 测试第一个match的距离是否小于第二个match的距离的testRatio倍
# 0 <= testRati < 1
Solver3D2D.Matcher.testRatio: 0.9

# 三角化点到两帧的最大距离相对于帧间距的最大比例
Triangulater.maxDisRatio: 200
Triangulater.minDisRatio: 1
# 重投影误差最大值
Triangulater.maxReprojErr: 50

# local_map
# 最少关键点数
# 如果当前局部地图关键帧数等于最大关键帧数，且关键点数小于最少关键点数，则增加最大关键帧数
# 否则减小最大关键帧数
LocalMap.minMapPoints: 300
# 地图点到每个观测帧的最大距离
LocalMap.maxInlierPointDis: 150
# 关键帧最大数量，超过此数量删除旧关键帧
LocalMap.minKeyFrames: 8
# 重投影误差最大值
LocalMap.maxReprojErr: 100
# 首先筛选前rankRatio比例的匹配
LocalMap.Matcher.rankRatio: 0.8
# 特征距离阈值相对最小特征距离的比例
LocalMap.Matcher.disThresRatio: 10
# 特征阈值的最小值，防止阈值过小选出的点不够
# Matcher.disThresMin: 30
LocalMap.Matcher.disThresMin: 200
# 如果testRatio不为0，通过knnMatch获得距离最近的两个match
# 测试第一个match的距离是否小于第二个match的距离的testRatio倍
# 0 <= testRati < 1
LocalMap.Matcher.testRatio: 0.95

# tracking

# 初始化两帧的最大间隔帧数
Initializer.maxFrameInterval: 5
# 初始化两帧的最小间隔帧数
Initializer.minFrameInterval: 2
# 初始化地图的最小点数
Initializer.minMapPointNum: 50

# 关键帧的最小间距
Tracker.minKeyFrameDis: 0.5
# 关键帧的最大间距
Tracker.maxKeyFrameDis: 5
# 关键帧的最少地图点
Tracker.minKeyFrameInlierNum: 15
# 关键帧之间的最小间隔帧数
Tracker.minKeyFrameInterval: 1
# 关键帧解PnP所用地图点数相对于上一关键帧的最大比例
Tracker.maxKeyFrameTrackRatio: 0.8

